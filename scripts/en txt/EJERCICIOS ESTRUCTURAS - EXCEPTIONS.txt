--PL/SQL ESTRUCTURAS BASICAS
--EJERCICIOS CON BLOQUES ANONIMOS
--SET SERVEROUTPUT ON; SE USA PARA QUE DESPLIEGUE LOS RESULTADOS EN LA PANTALLA

SET SERVEROUTPUT ON;
DECLARE
     A VARCHAR(10) := ''; 
BEGIN 
    SELECT TO_CHAR(SYSDATE) INTO A FROM DUAL;   
    DBMS_OUTPUT.PUT_LINE('LA FECHA ACTUAL ES : ' || A); 
EXCEPTION 
   WHEN OTHERS THEN DBMS_OUTPUT.PUT_LINE('HOLA');
END;



--EJERCICIOS CON VARIABLES Y CONSTANTES
SET SERVEROUTPUT ON;
DECLARE
PRUEBA CONSTANT NUMBER(5) := 2022;
DIAS	NUMBER NOT NULL := 87;
BEGIN
    DBMS_OUTPUT.PUT_LINE(PRUEBA);
    DBMS_OUTPUT.PUT_LINE(DIAS);
    DIAS := DIAS + 13;
    DBMS_OUTPUT.PUT_LINE(DIAS); 
END;

--EJERCICIOS VARIABLES BOOLEANAS
SET SERVEROUTPUT ON;
DECLARE
  ASISTE BOOLEAN;
  CADENA VARCHAR2(10);
BEGIN
    ASISTE:=TRUE;
    CADENA := CASE WHEN ASISTE THEN 'VERDADERO' ELSE 'FALSO' END;
    DBMS_OUTPUT.PUT_LINE(CADENA);
END;


--EJERCICIOS %TYPE
SET SERVEROUTPUT ON;
DECLARE
   V_NOMBRE employees.first_name%TYPE;
   V_APELLIDO employees.last_name%TYPE;
BEGIN
   SELECT FIRST_NAME INTO V_NOMBRE FROM EMPLOYEES WHERE ROWNUM=1;
   V_APELLIDO:='MORALES';
   DBMS_OUTPUT.PUT_LINE('NOMBRE EMPLEADO:'||V_NOMBRE||'    APELLIDOS:'||V_APELLIDO);
END;



--EJERCICIOS %ROWTYPE
SET SERVEROUTPUT ON
DECLARE
      EMPLEADOS  	EMPLOYEES%ROWTYPE;
BEGIN
      SELECT * INTO EMPLEADOS
      FROM EMPLOYEES 
      WHERE EMPLOYEE_ID=100;
      DBMS_OUTPUT.PUT_LINE(EMPLEADOS.FIRST_NAME||' --->'||EMPLEADOS.SALARY);
END;


--EJERCICIOS BLOQUES ANIDADOS
SET SERVEROUTPUT ON;
DECLARE 
             XYZ NUMBER := 30;   -- VARIABLE GLOBAL
BEGIN
     DBMS_OUTPUT.PUT_LINE ('NOS ENCONTRAMOS EN EL BLOQUE 1');
     DBMS_OUTPUT.PUT_LINE (XYZ);
     DECLARE
            NUM   NUMBER  :=88;  --VARIABLES LOCALES
            XYZ NUMBER :=100;
     BEGIN
           DBMS_OUTPUT.PUT_LINE ('EN EL BLOQUE 2');
           DBMS_OUTPUT.PUT_LINE (NUM);
	       DBMS_OUTPUT.PUT_LINE (XYZ);
     END;
END;



--EJERCICIOS IF/ELSE/ELSEIF
SET SERVEROUTPUT ON
DECLARE
    VENTAS  NUMBER := 25000;
    BONO    NUMBER := 0;
BEGIN
    IF
        VENTAS > 40000
    THEN
        BONO := 1500;
    ELSIF VENTAS > 30000 THEN
        BONO := 500;
    ELSIF VENTAS > 20000 THEN
        BONO := 150;
    ELSE
        BONO := 100;
    END IF;
    dbms_output.put_line('VENTAS='||VENTAS|| ', BONO= '||BONO||'.');
END;


--EJERCICIOS CASE 
SET SERVEROUTPUT ON
DECLARE
  RENDIMIENTO CHAR(1);
BEGIN
  RENDIMIENTO := 'C';
  CASE RENDIMIENTO
    WHEN 'A' THEN DBMS_OUTPUT.PUT_LINE('EXCELENTE');
    WHEN 'B' THEN DBMS_OUTPUT.PUT_LINE('MUY BIEN');
    WHEN 'C' THEN DBMS_OUTPUT.PUT_LINE('BIEN');
    WHEN 'D' THEN DBMS_OUTPUT.PUT_LINE('REGULAR');
    WHEN 'F' THEN DBMS_OUTPUT.PUT_LINE('MALO');
    ELSE DBMS_OUTPUT.PUT_LINE('TERRIBLE!!!!!!!!');
  END CASE;
END;

-- EJERCICIO CASE SEARCHED
SET SERVEROUTPUT ON
DECLARE                                                                                      
  BONO  number;
BEGIN
  BONO := 100;
  CASE 
    WHEN BONO >500 THEN DBMS_OUTPUT.PUT_LINE('EXCELENTE');
    WHEN BONO <= 500 and BONO > 250 THEN DBMS_OUTPUT.PUT_LINE('MUY BIEN');
    WHEN BONO <= 250 and BONO > 100 THEN DBMS_OUTPUT.PUT_LINE('BIEN');
    ELSE DBMS_OUTPUT.PUT_LINE('POR DEBAJO DE LO ESPERADO');
  END CASE;
END;


--EJERCICIOS LOOP
SET SERVEROUTPUT ON
DECLARE
   X NUMBER:=1;
BEGIN
    LOOP 
      DBMS_OUTPUT.PUT_LINE(X);
      X:=X+1;
      IF X = 11
        THEN EXIT;
      END IF;
    END LOOP;
END;

-----------------º
DECLARE
   X NUMBER:=1;
BEGIN
    LOOP 
     DBMS_OUTPUT.PUT_LINE(X);
     X:=X+1;
     EXIT WHEN X=11;
    END LOOP;
END;


--EJERCICIOS FOR
SET SERVEROUTPUT ON
DECLARE
   i NUMBER;
BEGIN
  DBMS_OUTPUT.PUT_LINE('Este LOOP es creciente!!!');
  FOR i IN 5..15 LOOP
     dbms_output.put_line(i);
  END LOOP;
  DBMS_OUTPUT.PUT_LINE('--------');
  DBMS_OUTPUT.PUT_LINE('Este LOOP es DECRECIENTE!!!');
  FOR i IN REVERSE 5..15 LOOP   
      dbms_output.put_line(i);        
  END LOOP;
END;


--FOR SALIDA ANORMAL
SET SERVEROUTPUT ON
DECLARE 
  i VARCHAR2(100):='AAAAA';
BEGIN
    FOR i IN REVERSE 5..15 LOOP
       dbms_output.put_line(i);
       EXIT WHEN i=10;
    END LOOP;
    dbms_output.put_line(i);
END;

--FOR CON SELECT
BEGIN
  FOR i IN (SELECT * FROM REGIONS) LOOP
    DBMS_OUTPUT.PUT_LINE(i.REGION_NAME);
  END LOOP;
END;



--EJEMPLOS CON WHILE
DECLARE
  HECHO  BOOLEAN := FALSE;
  X NUMBER:=0;
BEGIN
  WHILE X <10 LOOP
    DBMS_OUTPUT.PUT_LINE(X);
    X:=X+1;
    EXIT WHEN X=5;
  END LOOP;
 
  WHILE HECHO LOOP
    DBMS_OUTPUT.PUT_LINE ('INGRESANDO AL WHILE 1');
    HECHO := TRUE;  
  END LOOP;

  WHILE NOT HECHO LOOP
    DBMS_OUTPUT.PUT_LINE ('INGRESANDO AL WHILE 2');
    HECHO := TRUE;
  END LOOP;
END;


--MAS EJEMPLOS CON WHILE
create table DEPPRUEBA (   
  CODIGO      number,   
  DPTO      varchar2(50) not null,   
  CIUDAD       varchar2(50) not null 
);

CREATE SEQUENCE SQ_DEPPRUEBA

SET SERVEROUTPUT ON;
DECLARE
    v_NOM_DEP   DEPPRUEBA.DPTO%TYPE:='DEPARTAMENTO PRUEBA';
    v_CIUDAD      DEPPRUEBA.CIUDAD%TYPE := 'CIUDAD PRUEBA';
    v_CONTADOR  NUMBER := 1;
BEGIN
    WHILE v_CONTADOR <= 3 LOOP
        INSERT INTO DEPPRUEBA
        VALUES(SQ_DEPPRUEBA.NEXTVAL,v_NOM_DEP,v_CIUDAD);
        v_CONTADOR := v_CONTADOR + 1;
    END LOOP;
    COMMIT;
END;



-- EJERCICIOS CON CONTINUE
SET SERVEROUTPUT ON;
DECLARE
    v_total SIMPLE_INTEGER := 0;
BEGIN
    FOR i IN 1..10 LOOP
        v_total := v_total + i;
        DBMS_OUTPUT.PUT_LINE('Iteración:'|| i||', El Total es: '|| v_total);
        CONTINUE WHEN i > 5;
        v_total := v_total + i;
        DBMS_OUTPUT.PUT_LINE('Fuera del LOOP, el Total es:'|| v_total);
    END LOOP;
END;




--MAS EJERCICIOS CON CONTINUE

SET SERVEROUTPUT ON;
DECLARE 
    v_total NUMBER := 0;
BEGIN
    <<Top_LOOP>>
    FOR i IN 1..10 LOOP
        v_total := v_total + 1;
        DBMS_OUTPUT.PUT_LINE('El Total es: ' || v_total);
        FOR j IN 1..10 LOOP
            CONTINUE Top_LOOP WHEN i + j > 5;
            v_total := v_total + 1;
              DBMS_OUTPUT.PUT_LINE('El Total XXXXXXXXes: ' || v_total);
        END LOOP;
    END LOOP;
END;



--MANEJO DE EXCEPCIONES

--EJEMPLO CON EXCEPCIONES PREDEFINIDAS
-- NO_DATA_FOUND   ORA-01403
-- TOO_MANY_ROWS  ORA-1422
-- ZERO_DIVIDE
-- DUP_VAL_ON_INDEX

SET SERVEROUTPUT ON
DECLARE
    EMPL EMPLOYEES%ROWTYPE;
BEGIN
    SELECT * INTO EMPL
    FROM EMPLOYEES
    WHERE EMPLOYEE_ID>1;
    DBMS_OUTPUT.PUT_LINE(EMPL.FIRST_NAME);
EXCEPTION
   WHEN NO_DATA_FOUND THEN 
       DBMS_OUTPUT.PUT_LINE('ERROR, EMPLEADO INEXISTENTE');
  WHEN TOO_MANY_ROWS THEN
       DBMS_OUTPUT.PUT_LINE('ERROR, DEMASIADOS EMPLEADO');
   WHEN OTHERS THEN
        DBMS_OUTPUT.PUT_LINE('ERROR INDEFINIDO');
END;





--EXCEPCIONES NO PREDEFINIDAS

SET SERVEROUTPUT ON
DECLARE
   MI_ERROR EXCEPTION;
   PRAGMA EXCEPTION_INIT(MI_ERROR,-937);
   V_ID NUMBER;
   V_SALARIO NUMBER;
BEGIN
    SELECT EMPLOYEE_ID,SUM(SALARY) INTO V_ID,V_SALARIO FROM EMPLOYEES; 
    DBMS_OUTPUT.PUT_LINE(V_ID);
EXCEPTION
   WHEN MI_ERROR THEN 
       DBMS_OUTPUT.PUT_LINE('FUNCION DE GRUPO INCORRECTA');
   WHEN OTHERS THEN
        DBMS_OUTPUT.PUT_LINE('ERROR NO CONTROLADO');
END;


--MANEJO DE SQLCODE - SQLERRM
SET SERVEROUTPUT ON
DECLARE
   EMPL EMPLOYEES%ROWTYPE;
BEGIN
   SELECT * INTO EMPL FROM EMPLOYEES;
    DBMS_OUTPUT.PUT_LINE(EMPL.SALARY);
EXCEPTION   
   WHEN OTHERS THEN
        DBMS_OUTPUT.PUT_LINE(SQLCODE);
        DBMS_OUTPUT.PUT_LINE(SQLERRM);
END;




--EJEMPLO DE EXCEPCIONES PARA CAPTURAR OS ERRORES EN LA TABLA ERRORES

CREATE TABLE ERRORES
(CODIGO NUMBER,
MENSAJE VARCHAR2(100));

SET SERVEROUTPUT ON
DECLARE
   EMPL EMPLOYEES%ROWTYPE;
   CODIGO NUMBER;
   MENSAJE VARCHAR2(100);
BEGIN
   SELECT * INTO EMPL FROM EMPLOYEES;
    DBMS_OUTPUT.PUT_LINE(EMPL.SALARY);
EXCEPTION   
   WHEN OTHERS THEN
        DBMS_OUTPUT.PUT_LINE(SQLCODE);
        DBMS_OUTPUT.PUT_LINE(SQLERRM);
        CODIGO:=SQLCODE;
        MENSAJE:=SQLERRM;
        INSERT INTO ERRORES VALUES (CODIGO,MENSAJE);
        COMMIT;
END;



--CONTROLAR SQL CON EXCEPCIONES EJEMPLO CON DEPARTAMENTOS

SET SERVEROUTPUT ON
DECLARE
  DEP DEPARTAMENTOS%ROWTYPE;
  DEP_CONTROL DEPARTAMENTOS.DEPNRO%TYPE;
BEGIN
   DEP.DEPNRO:=1;
   DEP.NOM_DEP:='DESARROLLO SISTEMAS';
   DEP.CIUDAD:='LA PAZ';
   SELECT DEPNRO INTO DEP_CONTROL FROM DEPARTAMENTOS
   WHERE DEPNRO=DEP.DEPNRO;
   DBMS_OUTPUT.PUT_LINE('EL DEPARTAMENTO YA EXISTE');
EXCEPTION   
   WHEN NO_DATA_FOUND  THEN
        INSERT INTO DEPARTAMENTOS VALUES (DEP.DEPNRO,DEP.NOM_DEP,DEP.CIUDAD);
        COMMIT;
END;


--EJEMPLO CON REGIONS
SET SERVEROUTPUT ON
DECLARE
  REG REGIONS%ROWTYPE;
  REG_CONTROL REGIONS.REGION_ID%TYPE;
BEGIN
   REG.REGION_ID:=3;
   REG.REGION_NAME:='AFRICA';
   SELECT REGION_ID INTO REG_CONTROL FROM REGIONS
   WHERE REGION_ID=REG.REGION_ID;
   DBMS_OUTPUT.PUT_LINE('LA REGION YA EXISTE');
EXCEPTION   
   WHEN NO_DATA_FOUND  THEN
        INSERT INTO REGIONS VALUES (REG.REGION_ID,REG.REGION_NAME);
        COMMIT;
END;
/


--EXCEPCIONES CREADAS POR EL USUARIO
DECLARE
   reg_max EXCEPTION;
   regn NUMBER;
   regt varchar2(200);
BEGIN
   regn:=101;
   regt:='ASIA';
   IF regn > 100 THEN
         RAISE reg_max;  
    ELSE
       insert into regions values (regn,regt);
       commit;
      END IF;
EXCEPTION
  WHEN reg_max THEN  
    DBMS_OUTPUT.PUT_LINE('La region no puede ser mayor de 100.');
  WHEN OTHERS THEN
    DBMS_OUTPUT.PUT_LINE('Error indefinido');
END;
/



--AMBITO DE LAS EXCEPCIONES
SET SERVEROUTPUT ON;
DECLARE
   reg_max EXCEPTION;
   regn NUMBER;
   regt varchar2(200);
BEGIN
   regn:=101;
   regt:='ASIA';
   
   BEGIN
       IF regn > 100 THEN
             RAISE reg_max;  
       ELSE
           insert into regions values (regn,regt);
           commit;
       END IF;
   END;
EXCEPTION
  WHEN reg_max THEN  
    DBMS_OUTPUT.PUT_LINE('La region no puede ser mayor de 100.');
  WHEN OTHERS THEN
    DBMS_OUTPUT.PUT_LINE('Error indefinido');
END;





--CON EL DOMINIO HIJO
SET SERVEROUTPUT ON;
DECLARE
   reg_max EXCEPTION;   
   regn NUMBER;
   regt varchar2(200);
BEGIN
   regn:=101;
   regt:='ASIA';
   DECLARE
   reg_max EXCEPTION;   
   BEGIN
       IF regn > 100 THEN
             RAISE reg_max;  
       ELSE
           insert into regions values (regn,regt);
           commit;
       END IF;
 /* EXCEPTION
  WHEN reg_max THEN  
    DBMS_OUTPUT.PUT_LINE('La region no puede ser mayor de 100. MODULO HIJO');
  WHEN OTHERS THEN
    DBMS_OUTPUT.PUT_LINE('Error indefinido');*/
    IF regn > 100 THEN
             RAISE reg_max;
   END IF;
   END;
   
 EXCEPTION
  WHEN reg_max THEN  
    DBMS_OUTPUT.PUT_LINE('La region no puede ser mayor de 100. ');
  WHEN OTHERS THEN
    DBMS_OUTPUT.PUT_LINE('Error indefinido');

END;


--EJEMPLO CON RAISE APLICATION ERROR
SET SERVER OUTPUT ON;
DECLARE   
   regn NUMBER;
   regt varchar2(200);
BEGIN
   regn:=101;
   regt:='ASIA';
   iF regn > 100 THEN
       -- EL CODIGO DEBE ESTAR ENTRE -20000 Y -20999
       RAISE_APPLICATION_ERROR(-20001,'LA ID NO PUEDE SER MAYOR DE 100');  
    ELSE
       insert into regions values (regn,regt);
       commit;
    END IF;
END;
/




--EJEMPLO 2
SET SERVEROUTPUT ON
DECLARE
CONTROL_REGIONES EXCEPTION;
CODIGO NUMBER:=201;
BEGIN
  IF codigo > 200 THEN
        raise control_regiones;
  ELSE
       INSERT INTO REGIONS VALUES (CODIGO,'PRUEBA');
  END IF;
EXCEPTION
WHEN control_regiones THEN
   RAISE_APPLICATION_ERROR(-20001,'El codigo debe ser inferior a 200');
WHEN OTHERS THEN 
   dbms_output.put_line(SQLcode);
   dbms_output.put_line(SQLERRM);
END;